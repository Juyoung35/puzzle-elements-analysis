cell, side, point, corner, padding.
아예 
element, padding, border, margin 채용하는건?
기본적으로는 no-margin 태그로서, side-sharing, point-sharing 하다가 디자인적으로 떨어뜨려놔야할 때 적용될 수 있도록.

현재 penpa의 스타일적 부분까지 그대로 가져오고 있는데

3d 환경에서의 구현을 위해서는 수정이 필요할 것으로 보임.

일단 보기 좋게 정의부 따로 써놓고, 구현부(impl) 따로 만들기. 아래다.

같은 공간 내에 겹칠 수 있는지 여부에 대하여
공간키워드를 복합적으로 사용하면 (line, edge, cage 등) 통일적으로 layer를 부여해서 cell, side, point, corner, padding 각 공간 중 하나에 저장하기 까다롭다.

아예 공간 별 입장 가능한 제한 수를 1로 바꾸고, 2개 이상을 입장시키고 싶을 때는 아예 복합타입을 새롭게 정의하도록 만드는 것은 어떤가?
그럼 애초에 저장 자체가 Single(pointer), Multiple(Vec<pointer>)가 되려나.
멀티플이 아니라 Composite(pointer)가 될 수도.

negative trait이 안되는 것 같기 때문에 매크로를 만들어서 impl_even!, impl_odd 박고
Wall에 대해서는 하지 않고 derive(Even)으로 만들기.

struct은 정의하는 건 다른 field를 가지고 있을 때고..
ㄴ 그냥 중복정의 하더라도 그냥 macro로 구현해버리고
모든 곳에 interface id를 넣어야 함. instance들은.
아이면 instance를 상호작용 쪽에만 제한하려 아예 interface 전용 vector에 보관하고 꺼내 쓰는건?

랜더링을 bevy에서 어떻게 처리하는지 좀 알 필요 있음.
